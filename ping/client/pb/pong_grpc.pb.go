// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: pong.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Pong_PongMessage_FullMethodName = "/Pong/PongMessage"
)

// PongClient is the client API for Pong service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PongClient interface {
	PongMessage(ctx context.Context, in *PongRequest, opts ...grpc.CallOption) (*PongResponse, error)
}

type pongClient struct {
	cc grpc.ClientConnInterface
}

func NewPongClient(cc grpc.ClientConnInterface) PongClient {
	return &pongClient{cc}
}

func (c *pongClient) PongMessage(ctx context.Context, in *PongRequest, opts ...grpc.CallOption) (*PongResponse, error) {
	out := new(PongResponse)
	err := c.cc.Invoke(ctx, Pong_PongMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PongServer is the server API for Pong service.
// All implementations must embed UnimplementedPongServer
// for forward compatibility
type PongServer interface {
	PongMessage(context.Context, *PongRequest) (*PongResponse, error)
	mustEmbedUnimplementedPongServer()
}

// UnimplementedPongServer must be embedded to have forward compatible implementations.
type UnimplementedPongServer struct {
}

func (UnimplementedPongServer) PongMessage(context.Context, *PongRequest) (*PongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PongMessage not implemented")
}
func (UnimplementedPongServer) mustEmbedUnimplementedPongServer() {}

// UnsafePongServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PongServer will
// result in compilation errors.
type UnsafePongServer interface {
	mustEmbedUnimplementedPongServer()
}

func RegisterPongServer(s grpc.ServiceRegistrar, srv PongServer) {
	s.RegisterService(&Pong_ServiceDesc, srv)
}

func _Pong_PongMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PongServer).PongMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pong_PongMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PongServer).PongMessage(ctx, req.(*PongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Pong_ServiceDesc is the grpc.ServiceDesc for Pong service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pong_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Pong",
	HandlerType: (*PongServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PongMessage",
			Handler:    _Pong_PongMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pong.proto",
}
